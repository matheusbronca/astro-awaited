---
interface Props {
  transitionDuration?: number,
  transitionEase?: "linear" | "ease-in" | "ease-out" | "ease-in-out";
}

const { transitionDuration = 250, transitionEase = 'linear'  } = Astro.props

---
<div [data-awaited-wrapper]>
  <slot name="fallback" />
  <slot />
</div>
<script>
  const removeFallbacks = () => {
      const fallbacks = [...document.querySelectorAll('[data-awaited-fallback]')] ;
      const hasFallbacks =  fallbacks.length > 0;
      if(!hasFallbacks) return;
      fallbacks.forEach(e => {
      const duration = Number(getComputedStyle(e).animationDuration.split('s')[0]) * 1000;

      const id = setInterval(() => { e.remove(); clearInterval(id);}, duration + 50);
    })
  }

  removeFallbacks();
</script>
<style define:vars={{ animationDuration: `${transitionDuration}ms`, animationEase: transitionEase }}>
  @keyframes awaitedFadeOut {
    100% {
      opacity: 0;
      visibility: hidden;
    }
  }

  div {
    position: relative; 
  }

  :global([data-awaited-fallback])  {
    pointer-events: none;
    opacity: 1;
  }

  div:has(>*:not([data-awaited-fallback])) > :global([data-awaited-fallback]) {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      animation: awaitedFadeOut var(--animationDuration) var(--animationEase) forwards;
  }
</style>
